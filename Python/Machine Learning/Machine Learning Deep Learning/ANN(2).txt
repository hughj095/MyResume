# Import the Libraries

import numpy as np
import pandas as pd
import tensorflow as tf

# Import the Dataset

dataset = pd.read_csv('Churn_Modelling.csv')
X = dataset.iloc[:, 3:-1].values
y = dataset.iloc[:, -1].values

# Encoding Categorical Data

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
X[:, 2] = le.fit_transform(X[:, 2])

# One Hot Encoding Geography column

from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
ct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [1])], remainder='passthrough')
X = np.array(ct.fit_transform(X))

# Splitting into Training and Test Sets

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)

# Feature Scaling

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

# Build the ANN
# Initialize the ANN

ann = tf.keras.models.Sequential()

# Add input layer and hidden layer

ann.add(tf.keras.layers.Dense(units=6, activation='relu'))

# Add second hidden layer

ann.add(tf.keras.layers.Dense(units=6, activation='relu'))

# Add output layer -- the sigmoid model will result in a probability between 0 and 1

ann.add(tf.keras.layers.Dense(units=1, activation='sigmoid'))

# Train the ANN
# Compile the ANN

ann.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])

# Train the ANN on the training set

ann.fit(X_train, y_train, batch_size = 32, epochs = 100)

# Make a Prediction with certain variables
# Balance $60k, 2 Products, France, Credit Score 600, etc
# Be sure to check if feature scaling was used, then apply to the predict method (sc)

print(ann.predict(sc.transform([[1, 0, 0, 600, 1, 40, 3, 60000, 2, 1, 1, 50000]])) > 0.5)

# Predict the Test Set results

y_pred = ann.predict(X_test)
y_pred = (y_pred > 0.5)
print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))

# Make the Confusion Matrix
from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_test, y_pred)
print(cm)
accuracy_score(y_test, y_pred)

